pipeline {
    agent any

    tools {
        jdk 'jdk-11'
    }

    environment {
        // Global Java for SonarQube and default execution
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk'
        PATH = "${JAVA_HOME}/bin:${PATH}"

        // Your environment variables
        SONAR_TOKEN = credentials('sonar-token')
        DOCKER_IMAGE = 'coveros/demo-app'
        HTTP_PROXY = 'http://127.0.0.1:9888'
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            environment {
                JAVA_HOME = '/usr/lib/jvm/java-11-openjdk'
                PATH = "${JAVA_HOME}/bin:${PATH}"
            }
            steps {
                echo 'Building project with Gradle...'
                sh './gradlew clean assemble'

                echo 'Building Docker image with WAR file...'
                sh 'docker build -t $DOCKER_IMAGE .'
            }
        }

        stage('Unit Tests') {
            environment {
                JAVA_HOME = '/usr/lib/jvm/java-11-openjdk'
                PATH = "${JAVA_HOME}/bin:${PATH}"
            }
            steps {
                echo 'Running unit tests...'
                sh './gradlew test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('My SonarQube Server') {
                    sh './gradlew sonarqube -Dsonar.host.url=http://sonarqube:9000 -Dsonar.login="admin" -Dsonar.password="ensf400"'
                }
            }
        }

        stage('Deploy to Test') {
            steps {
                sh './gradlew deployToTestWindowsLocal'
                sh 'PIPENV_IGNORE_VIRTUALENVS=1 pipenv install'
                sh './gradlew waitForHeartBeat'
                sh 'curl http://zap/JSON/core/action/newSession -s --proxy localhost:9888'
            }
        }

        stage('API Tests') {
            steps {
                sh './gradlew runApiTests'
            }
            post {
                always {
                    junit 'build/test-results/api_tests/*.xml'
                }
            }
        }

        stage('UI BDD Tests') {
            steps {
                sh './gradlew runBehaveTests'
                sh './gradlew generateCucumberReport'
            }
            post {
                always {
                    junit 'build/test-results/bdd_ui/*.xml'
                }
            }
        }

        stage('UI Tests') {
            steps {
                sh 'cd src/ui_tests/java && ./gradlew clean test'
            }
            post {
                always {
                    junit 'src/ui_tests/java/build/test-results/test/*.xml'
                }
            }
        }

        stage('Security: Dependency Analysis') {
            steps {
                sh './gradlew dependencyCheckAnalyze'
            }
        }

        stage('Performance Tests') {
            steps {
                sh './gradlew runPerfTests'
            }
        }

        stage('Mutation Tests') {
            environment {
                JAVA_HOME = '/usr/lib/jvm/java-11-openjdk'
                PATH = "${JAVA_HOME}/bin:${PATH}"
            }
            steps {
                sh './gradlew pitest'
            }
        }

        stage('Build Documentation') {
            steps {
                sh './gradlew javadoc'
            }
        }

        stage('Collect Zap Security Report') {
            steps {
                sh 'mkdir -p build/reports/zap'
                sh 'curl http://zap/OTHER/core/other/htmlreport --proxy localhost:9888 > build/reports/zap/zap_report.html'
            }
        }

        stage('Deploy to Prod') {
            steps {
                sh 'sleep 5'
            }
        }
    }

    post {
        always {
            echo 'Publishing test results...'
            junit 'build/test-results/test/*.xml'
        }
        failure {
            echo 'Build failed!'
        }
        success {
            echo 'CI/CD Pipeline completed successfully.'
        }
    }
}
